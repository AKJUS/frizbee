name: "Terraform Plan"

on:
  pull_request:
    branches:
      - main
    paths:
      - "**/*.tf"
      - "**/*.tfvars"
      - "**/*.hcl"
      - ".github/workflows/preview.yaml"

jobs:
  plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    strategy:
      matrix:
        # TODO: can we get this from a directory listing?
        component:
          [
            "dashboards",
            "dns",
            "iam",
            "staging2",
            "production",
            "sandbox",
            "telemetry",
          ]

    defaults:
      run:
        working-directory: ${{ matrix.component }}
    env:
      PLAN_OUTPUT: "./tfplan.txt"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Role includes the account ID as an ARN
          role-to-assume: ${{ secrets.AWS_ROLE_TO_PLAN }}
          aws-region: us-east-1

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Init
        id: init
        run: |
          terraform init

      - name: Validate
        id: validate
        run: |
          terraform validate -no-color

      - name: Plan
        id: plan
        run: |
          terraform plan -no-color -lock=false -input=false -out=tfplan
        continue-on-error: true

      - name: Show Plan
        id: show_plan
        run: |
          terraform show -no-color tfplan >> "$PLAN_OUTPUT"

      - name: Report
        uses: actions/github-script@v7
        id: plan-comment
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { readFileSync } = require('node:fs');
            // 1. Determine output format; large diffs need additional summarization
            const planFormat = readFileSync('${{ matrix.component }}/' + process.env.PLAN_OUTPUT, 'utf8');
            let planComment = planFormat;
            if (planFormat.length > 65535) {
              planComment = planFormat.split('\n').filter(
                (line) => (line.startsWith('  # ') || line.startsWith('Plan:'))).join('\n');
              planComment = '# Plan output too large to display, summarized:\n\n' + planComment;
            }

            // 1. Retrieve existing bot comments for the PR

            const output = `
               ## Terraform Plan \`${{ matrix.component }}\`
               #### Terraform Fmt \`${{ steps.fmt.outcome }}\`
               
               #### Terraform Init \`${{ steps.init.outcome }}\`
               
               #### Terraform Validate \`${{ steps.validate.outcome }}\`
               
               #### Terraform Plan \`${{ steps.plan.outcome }}\`
               #### Terraform Plan Output <!-- BOT-GENERATED-PLAN-OUTPUT ${{ matrix.component }} -->
               \`\`\`
               ` + planComment + `
               \`\`\`
               `;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('<!-- BOT-GENERATED-PLAN-OUTPUT ${{ matrix.component }} -->')
            });
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Fail if continue steps failed
        id: check-failure
        if: steps.plan.outcome != 'success' || steps.fmt.outcome != 'success'
        run: exit 1
